#version 450
#extension GL_GOOGLE_include_directive: enable

#include "Object.glsl"
#include "Camera.glsl"
#include "Light.glsl"
#include "Collision.glsl"

#define MAX_ORTHER_LIGHT_COUNT 256
#define MAX_LIGHT_INDEX_COUNT 64
#define TILE_WIDTH 32
#define LOCAL_GROUP_WIDTH 8
#define LOCAL_GROUP_STEP (LOCAL_GROUP_WIDTH * LOCAL_GROUP_WIDTH)
#define ITERATER_END_1D (TILE_WIDTH / LOCAL_GROUP_WIDTH)
#define ITERATER_END (ITERATER_END_1D * ITERATER_END_1D)

layout (local_size_x = LOCAL_GROUP_WIDTH, local_size_y = LOCAL_GROUP_WIDTH) in;

layout(set = 0, binding = 0) uniform _CameraInfo
{
    CameraInfo info;
} cameraInfo;

layout (set = 1, binding = 0) uniform LightBoundingBoxInfos
{
	int count;
	LightBoundingBoxInfo[MAX_ORTHER_LIGHT_COUNT] infos;
}lightBoundingBoxInfos;

struct LightIndexList
{
	int count;
	int[MAX_LIGHT_INDEX_COUNT] indexes;
};
layout (set = 2, binding = 0) buffer OpaqueLightIndexLists
{
	ivec2 tileCount;
	LightIndexList[] lists;
}opaqueLightIndexLists;

layout (set = 3, binding = 0) buffer TransparentLightIndexLists
{
	ivec2 tileCount;
	LightIndexList[] lists;
}transparentLightIndexLists;

layout (set = 4, binding = 0, r32f) uniform readonly image2D depthImage;

int Iterater = 0;

ivec2 globalGroupOffset = ivec2(gl_WorkGroupID.xy * TILE_WIDTH);
ivec2 localGroupOffset = ivec2(gl_LocalInvocationID.xy);
int threadLocalIndex = int(gl_LocalInvocationID.y * LOCAL_GROUP_WIDTH + gl_LocalInvocationID.x);
#define iterationOffset (ivec2(Iterater % ITERATER_END_1D, Iterater / ITERATER_END_1D) * LOCAL_GROUP_WIDTH)
#define pixelOffset (globalGroupOffset + localGroupOffset + iterationOffset)

#define globalGroupID (ivec2(gl_WorkGroupID.xy))
#define globalGroupSize (ivec2(gl_NumWorkGroups.xy))
#define globalGroup1DID (globalGroupID.y * globalGroupSize.x + globalGroupID.x)

#define depthImageSize (imageSize(depthImage))

shared float minNdcDepth;
shared float maxNdcDepth;
shared float[LOCAL_GROUP_WIDTH * LOCAL_GROUP_WIDTH] localMinNdcDepths;
shared float[LOCAL_GROUP_WIDTH * LOCAL_GROUP_WIDTH] localMaxNdcDepths;
shared vec4[6] opaqueFrustumPlanes;
shared vec4[6] transparentFrustumPlanes;
shared int opaqueLightIndexCount;
shared int transparentLightIndexCount;

void main()
{	
	///Init shared
	if(localGroupOffset == ivec2(0, 0))
	{
		minNdcDepth = 1;
		maxNdcDepth = 0;

		opaqueLightIndexCount = 0;
		transparentLightIndexCount = 0;
	}
	barrier();

	///Find local thread's max min depth
	{
		float minLocalDepth = 1;
		float maxLocalDepth = 0;
		for(Iterater = 0; Iterater < ITERATER_END; Iterater++)
		{
			vec2 po = pixelOffset;
			if(po.x >= depthImageSize.x || po.y >= depthImageSize.y) continue;
			float pixelNdcDepth = imageLoad(depthImage, ivec2(po)).r;
			minLocalDepth = minLocalDepth <= pixelNdcDepth ? minLocalDepth : pixelNdcDepth;
			maxLocalDepth = maxLocalDepth >= pixelNdcDepth ? maxLocalDepth : pixelNdcDepth;
		}
		localMinNdcDepths[threadLocalIndex] = minLocalDepth;
		localMaxNdcDepths[threadLocalIndex] = maxLocalDepth;
		barrier();
	}

	///Find group's max min depth
	if(localGroupOffset == ivec2(0, 0))
	{
		float minGroupDepth = 1;
		float maxGroupDepth = 0;
		for(int i = 0; i < LOCAL_GROUP_WIDTH * LOCAL_GROUP_WIDTH; i++)
		{
			minGroupDepth = localMinNdcDepths[i] < minGroupDepth ? localMinNdcDepths[i] : minGroupDepth;
			maxGroupDepth = localMaxNdcDepths[i] > maxGroupDepth ? localMaxNdcDepths[i] : maxGroupDepth;
		}
		minNdcDepth = minGroupDepth;
		maxNdcDepth = maxGroupDepth;
		barrier();
	}

	///Build ggo bounding box
	if(localGroupOffset == ivec2(0, 0))
	{
		int boundingBoxPixelWidth = depthImageSize.x - globalGroupOffset.x >= TILE_WIDTH ? TILE_WIDTH : depthImageSize.x % TILE_WIDTH;
		int boundingBoxPixelHeight = depthImageSize.y - globalGroupOffset.y >= TILE_WIDTH ? TILE_WIDTH : depthImageSize.y % TILE_WIDTH;
	
		vec2[4] NPositions;
		NPositions[0] = PositionS2N(vec2(globalGroupOffset + ivec2(0, 0)) / depthImageSize);
		NPositions[1] = PositionS2N(vec2(globalGroupOffset + ivec2(0, boundingBoxPixelHeight)) / depthImageSize);
		NPositions[2] = PositionS2N(vec2(globalGroupOffset + ivec2(boundingBoxPixelWidth, boundingBoxPixelHeight)) / depthImageSize);
		NPositions[3] = PositionS2N(vec2(globalGroupOffset + ivec2(boundingBoxPixelWidth, 0)) / depthImageSize);

		vec3[4] nearVPositions;
		nearVPositions[0] = PositionN2V(vec3(NPositions[0], minNdcDepth), cameraInfo.info);
		nearVPositions[1] = PositionN2V(vec3(NPositions[1], minNdcDepth), cameraInfo.info);
		nearVPositions[2] = PositionN2V(vec3(NPositions[2], minNdcDepth), cameraInfo.info);
		nearVPositions[3] = PositionN2V(vec3(NPositions[3], minNdcDepth), cameraInfo.info);
		
		vec3[4] farVPositions;
		farVPositions[0] = PositionN2V(vec3(NPositions[0], maxNdcDepth), cameraInfo.info);
		farVPositions[1] = PositionN2V(vec3(NPositions[1], maxNdcDepth), cameraInfo.info);
		farVPositions[2] = PositionN2V(vec3(NPositions[2], maxNdcDepth), cameraInfo.info);
		farVPositions[3] = PositionN2V(vec3(NPositions[3], maxNdcDepth), cameraInfo.info);

		///Opaque
		///left
		opaqueFrustumPlanes[0] = BuildPlane(nearVPositions[0], nearVPositions[1], farVPositions[1]);
		///right
		opaqueFrustumPlanes[1] = BuildPlane(nearVPositions[3], farVPositions[3], farVPositions[2]);
		///bottom
		opaqueFrustumPlanes[2] = BuildPlane(nearVPositions[1], nearVPositions[2], farVPositions[2]);
		///top
		opaqueFrustumPlanes[3] = BuildPlane(nearVPositions[0], farVPositions[0], farVPositions[3]);
		///near
		opaqueFrustumPlanes[4] = BuildPlane(nearVPositions[0], nearVPositions[3], nearVPositions[2]);
		///far
		opaqueFrustumPlanes[5] = BuildPlane(farVPositions[3], farVPositions[0], farVPositions[1]);

		///Transparent
		transparentFrustumPlanes[0] = opaqueFrustumPlanes[0];
		transparentFrustumPlanes[1] = opaqueFrustumPlanes[1];
		transparentFrustumPlanes[2] = opaqueFrustumPlanes[2];
		transparentFrustumPlanes[3] = opaqueFrustumPlanes[3];
		///near
		transparentFrustumPlanes[4] = vec4(0, 0, -1, -cameraInfo.info.nearFlat);
		transparentFrustumPlanes[5] = opaqueFrustumPlanes[5];
	}
	barrier();

	///Transparent intersection test
	for(int i = threadLocalIndex; i < lightBoundingBoxInfos.count; i += LOCAL_GROUP_STEP)
	{
		bool intersected = CheckIntersection(lightBoundingBoxInfos.infos[i].vertexes, transparentFrustumPlanes, cameraInfo.info.view);
		if(intersected)
		{
			int storeIndex = atomicAdd(transparentLightIndexCount, 1);
			if(storeIndex >= MAX_LIGHT_INDEX_COUNT) break;
			transparentLightIndexLists.lists[globalGroup1DID].indexes[storeIndex] = i;
		}
	}
	barrier();

	///Opaque intersection test
	for(int i = threadLocalIndex; i < transparentLightIndexCount; i += LOCAL_GROUP_STEP)
	{
		bool intersected = CheckIntersection(lightBoundingBoxInfos.infos[transparentLightIndexLists.lists[globalGroup1DID].indexes[i]].vertexes, opaqueFrustumPlanes, cameraInfo.info.view);
		if(intersected)
		{
			int storeIndex = atomicAdd(opaqueLightIndexCount, 1);
			if(storeIndex >= MAX_LIGHT_INDEX_COUNT) break;
			opaqueLightIndexLists.lists[globalGroup1DID].indexes[storeIndex] = transparentLightIndexLists.lists[globalGroup1DID].indexes[i];
		}
	}
	barrier();

	///Set size
	if(localGroupOffset == ivec2(0, 0))
	{
		opaqueLightIndexLists.tileCount = (depthImageSize + ivec2(TILE_WIDTH - 1, TILE_WIDTH - 1)) / TILE_WIDTH;
		opaqueLightIndexLists.lists[globalGroup1DID].count = opaqueLightIndexCount;

		transparentLightIndexLists.tileCount = (depthImageSize + ivec2(TILE_WIDTH - 1, TILE_WIDTH - 1)) / TILE_WIDTH;
		transparentLightIndexLists.lists[globalGroup1DID].count = transparentLightIndexCount;
	}
}
