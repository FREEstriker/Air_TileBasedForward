#version 450
#extension GL_GOOGLE_include_directive: enable

#define LOCAL_GROUP_WIDTH 16
layout (local_size_x = LOCAL_GROUP_WIDTH, local_size_y = LOCAL_GROUP_WIDTH) in;

#define PI (3.141592653589793)
#define G (9.81)

layout(push_constant) uniform ResolveConstantInfo
{
    ivec2 imageSize;
	ivec2 meshEdgeVertexCount;
	float normalFactor;
	float bubblesLambda;
	float bubblesThreshold;
	float bubblesFactor;
} constantInfo;

layout (set = 0, binding = 0, rgba16f) uniform readonly image2D displacementImage;
layout (set = 1, binding = 0, rgba16f) uniform writeonly image2D normalImage;

void main()
{	
	// thread/saple Y = world Z
	const ivec2 threadPosition = ivec2(gl_GlobalInvocationID.xy);

	if(constantInfo.imageSize.x <= threadPosition.x || constantInfo.imageSize.y <= threadPosition.y) return;
	
	const ivec2 pixelPosition = threadPosition;

	const vec2 uintLength = vec2(1) / (vec2(constantInfo.meshEdgeVertexCount) - vec2(1));

    const ivec2 uvX1 = ivec2((pixelPosition.x - 1 + constantInfo.imageSize.x) % constantInfo.imageSize.x, pixelPosition.y);
    const ivec2 uvX2 = ivec2((pixelPosition.x + 1 + constantInfo.imageSize.x) % constantInfo.imageSize.x, pixelPosition.y);
    const ivec2 uvZ1 = ivec2(pixelPosition.x, (pixelPosition.y - 1 + constantInfo.imageSize.y) % constantInfo.imageSize.y);
    const ivec2 uvZ2 = ivec2(pixelPosition.x, (pixelPosition.y + 1 + constantInfo.imageSize.y) % constantInfo.imageSize.y);

    const vec3 x1D = imageLoad(displacementImage, uvX1).xyz;
    const vec3 x2D = imageLoad(displacementImage, uvX2).xyz;
    const vec3 z1D = imageLoad(displacementImage, uvZ1).xyz;
    const vec3 z2D = imageLoad(displacementImage, uvZ2).xyz;

	const vec3 normalScaleFactor = vec3(1, constantInfo.normalFactor, 1);
    const vec3 x1 = vec3(x1D.x - uintLength.x, x1D.yz) * normalScaleFactor;
    const vec3 x2 = vec3(x2D.x + uintLength.x, x2D.yz) * normalScaleFactor;
    const vec3 z1 = vec3(z1D.xy, z1D.z - uintLength.y) * normalScaleFactor;
    const vec3 z2 = vec3(z2D.xy, z2D.z + uintLength.y) * normalScaleFactor;

    const vec3 tangentX = x2 - x1;
    const vec3 tangentZ = z2 - z1;

    const vec3 normal = normalize(cross(tangentZ, tangentX));

    const vec3 ddx = x2D - x1D;
    const vec3 ddz = z2D - z1D;

    float jacobian = (1.0f + constantInfo.bubblesLambda * ddx.x) * (1.0f + constantInfo.bubblesLambda * ddz.z) - constantInfo.bubblesLambda * ddx.z * constantInfo.bubblesLambda * ddz.x;

    jacobian = clamp(max(0, constantInfo.bubblesThreshold - clamp(jacobian, 0, 1)) * constantInfo.bubblesFactor, 0, 1);

	imageStore(normalImage, pixelPosition, vec4(normal, jacobian));
}