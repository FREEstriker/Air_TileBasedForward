#version 450
#extension GL_GOOGLE_include_directive: enable

#define LOCAL_GROUP_WIDTH 16
layout (local_size_x = LOCAL_GROUP_WIDTH, local_size_y = LOCAL_GROUP_WIDTH) in;

#define PI (3.141592653589793)
#define G (9.81)

layout(push_constant) uniform GenerateFrequencyConstantInfo
{
    ivec2 imageSize;
	vec2 windDirection;
	float L;
	float windSpeed;
	float a;
	float windDependency;
} constantInfo;

layout (set = 0, binding = 0, rg32f) uniform readonly image2DArray gaussianNoiseImageArray;
layout (set = 1, binding = 0, rg32f) uniform image2DArray phillipsSpectrumImageArray;

float Phillips(in vec2 k)
{
    const float kLength2 = dot(k, k);
    if (kLength2 <= 0.0f) return 0;
    const float kLength4 = kLength2 * kLength2;

    const float L = constantInfo.windSpeed * constantInfo.windSpeed / G;
    const float L2 = L * L;

    const float l2 = L2 * 0.001 * 0.001;

	const float windCosine = dot(normalize(k), normalize(constantInfo.windDirection));
	const float windDependencyFactor = windCosine < 0 ? constantInfo.windDependency : 1;
	const float windCosine2 = pow(windCosine, 4);

    return windDependencyFactor * exp(-kLength2 * l2) * constantInfo.a * exp(-1.0 / (kLength2 * L2)) / kLength4 * windCosine2;
}

void main()
{	
	// thread/saple Y = world Z
	const ivec2 threadPosition = ivec2(gl_GlobalInvocationID.xy);

	if(constantInfo.imageSize.x <= threadPosition.x || constantInfo.imageSize.y <= threadPosition.y) return;
	
	const ivec2 pixelPosition = threadPosition;

	const vec2 k = 2 * PI * vec2(vec2(threadPosition) - 0.5 * vec2(constantInfo.imageSize)) / constantInfo.L;

    const vec2 hTilde0 = imageLoad(gaussianNoiseImageArray, ivec3(pixelPosition, 0)).xy * sqrt(abs(Phillips(k)) / 2);
    const vec2 hTilde0Conj = imageLoad(gaussianNoiseImageArray, ivec3(pixelPosition, 1)).xy * sqrt(abs(Phillips(-k)) / 2) * vec2(1, -1);

	imageStore(phillipsSpectrumImageArray, ivec3(pixelPosition, 0), vec4(hTilde0, 0, 0));
	imageStore(phillipsSpectrumImageArray, ivec3(pixelPosition, 1), vec4(hTilde0Conj, 0, 0));
}